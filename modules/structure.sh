#!/bin/bash
##############################################################################
# ZZCOLLAB STRUCTURE MODULE
##############################################################################
# 
# PURPOSE: Project structure creation and navigation setup
#          - Directory structure creation with tracking
#          - Symbolic link creation for convenience navigation
#          - Project layout management with uninstall support
#
# DEPENDENCIES: core.sh (for logging functions)
#
# TRACKING: All directories and symlinks created are tracked for uninstall
##############################################################################

# Validate core module is loaded
if [[ "${ZZCOLLAB_CORE_LOADED:-}" != "true" ]]; then
    echo "❌ Error: structure.sh requires core.sh to be loaded first" >&2
    exit 1
fi

#=============================================================================
# MANIFEST TRACKING FUNCTIONS
#=============================================================================

# Track directory creation for uninstall capability
# Arguments: $1 - directory path that was created
track_directory() {
    local dir="$1"
    if command -v jq >/dev/null 2>&1 && [[ -f "$MANIFEST_FILE" ]]; then
        local tmp
        tmp=$(mktemp)
        jq --arg dir "$dir" '.directories += [$dir]' "$MANIFEST_FILE" > "$tmp" && mv "$tmp" "$MANIFEST_FILE"
    elif [[ -f "$MANIFEST_TXT" ]]; then
        echo "directory:$dir" >> "$MANIFEST_TXT"
    fi
}

# Track symbolic link creation for uninstall capability
# Arguments: $1 - link name, $2 - target path
track_symlink() {
    local link="$1"
    local target="$2"
    if command -v jq >/dev/null 2>&1 && [[ -f "$MANIFEST_FILE" ]]; then
        local tmp
        tmp=$(mktemp)
        jq --arg link "$link" --arg target "$target" '.symlinks += [{"link": $link, "target": $target}]' "$MANIFEST_FILE" > "$tmp" && mv "$tmp" "$MANIFEST_FILE"
    elif [[ -f "$MANIFEST_TXT" ]]; then
        echo "symlink:$link:$target" >> "$MANIFEST_TXT"
    fi
}

#=============================================================================
# DIRECTORY STRUCTURE CREATION (extracted from lines 386-416)
#=============================================================================

# Function: create_directory_structure
# Purpose: Creates the complete directory structure for the R research compendium
# Creates: 18 directories organized for R package development and research workflow
# 
# Directory Layout Created:
#   R/                      - R package functions (exported to users)
#   man/                    - Manual pages (generated by roxygen2)
#   tests/testthat/         - Unit tests using testthat framework
#   vignettes/              - Package vignettes and tutorials
#   data/                   - Data management root directory
#   ├── raw_data/           - Original, unmodified datasets
#   ├── derived_data/       - Processed, analysis-ready data
#   ├── metadata/           - Data dictionaries and documentation
#   └── validation/         - Data quality reports and validation
#   analysis/               - Research analysis components
#   ├── report/              - Research paper (Rmd → PDF)
#   ├── figures/            - Generated plots and visualizations
#   ├── tables/             - Generated statistical tables
#   └── templates/          - Analysis templates and snippets
#   scripts/                - Working R scripts and exploratory analysis
#   archive/                - Archived files and old versions
#   docs/                   - Project documentation
#   .github/workflows/      - GitHub Actions CI/CD pipelines
#
# Error Handling: Fails fast if any directory creation fails
# Tracking: All created directories are tracked in manifest for uninstall
create_directory_structure() {
    log_info "Creating directory structure..."
    
    # Define all directories to create in logical order
    # Each directory serves a specific purpose in the research workflow
    local -r dirs=(
        "R"                      # R package functions
        "man"                    # Manual pages
        "tests/testthat"         # Unit tests with testthat subdirectory
        "vignettes"              # Package vignettes
        "data"                   # Data management root
        "data/raw_data"          # Raw, unmodified data
        "data/derived_data"      # Processed data ready for analysis
        "data/metadata"          # Data documentation and dictionaries
        "data/validation"        # Data quality and validation reports
        "analysis"               # Analysis workflow root
        "analysis/report"         # Research paper development
        "analysis/figures"       # Generated plots and figures
        "analysis/tables"        # Generated tables and summaries
        "analysis/templates"     # Analysis templates and reusable code
        "scripts"                # Working scripts and exploration
        "archive"                # Archived and legacy files
        "docs"                   # Project documentation
        ".github/workflows"      # GitHub Actions CI/CD workflows
    )
    
    # Create each directory and track it for uninstall capability
    for dir in "${dirs[@]}"; do
        # mkdir -p creates parent directories as needed and doesn't fail if directory exists
        if mkdir -p "$dir"; then
            # Track successful directory creation for uninstall manifest
            track_directory "$dir"
            log_info "Created directory: $dir"
        else
            log_error "Failed to create directory: $dir"
            return 1
        fi
    done
    
    log_success "Directory structure created (${#dirs[@]} directories)"
}

#=============================================================================
# SYMBOLIC LINKS CREATION (extracted from lines 623-646)
#=============================================================================

# Function: create_symbolic_links
# Purpose: Creates convenience symbolic links for quick navigation
# Creates: 10 single-letter symlinks pointing to frequently accessed directories
#
# Symbolic Links Created:
#   a → ./data                 - Quick access to data directory
#   n → ./analysis             - Quick access to analysis directory
#   f → ./analysis/figures     - Quick access to figures
#   t → ./analysis/tables      - Quick access to tables
#   s → ./scripts              - Quick access to scripts
#   m → ./man                  - Quick access to manual pages
#   e → ./tests                - Quick access to tests
#   o → ./docs                 - Quick access to documentation
#   c → ./archive              - Quick access to archive
#   p → ./analysis/report       - Quick access to paper directory
#
# Usage Examples:
#   cd a        # Go to data directory
#   ls f        # List figures
#   vim p/*.Rmd # Edit paper files
#
# Safety: Removes existing symlinks first to avoid conflicts
# Tracking: All created symlinks are tracked in manifest for uninstall
create_symbolic_links() {
    log_info "Creating symbolic links for convenience..."
    
    # Remove existing symlinks to avoid conflicts
    # Only remove if they are actually symbolic links (not files or directories)
    local symlinks=("a" "n" "f" "t" "s" "m" "e" "o" "c" "p")
    for link in "${symlinks[@]}"; do
        if [[ -L "$link" ]]; then
            rm "$link"
            log_info "Removed existing symlink: $link"
        fi
    done
    
    # Create new symlinks using exact same approach as original zzcollab.sh
    # This preserves the exact behavior and avoids associative array issues
    local created_count=0
    
    # Create symlinks one by one (same as original)
    if [[ -d "./data" ]]; then
        ln -s ./data a && track_symlink "a" "./data" && log_info "Created symlink: a → ./data" && ((created_count++))
    fi
    
    if [[ -d "./analysis" ]]; then
        ln -s ./analysis n && track_symlink "n" "./analysis" && log_info "Created symlink: n → ./analysis" && ((created_count++))
    fi
    
    if [[ -d "./analysis/figures" ]]; then
        ln -s ./analysis/figures f && track_symlink "f" "./analysis/figures" && log_info "Created symlink: f → ./analysis/figures" && ((created_count++))
    fi
    
    if [[ -d "./analysis/tables" ]]; then
        ln -s ./analysis/tables t && track_symlink "t" "./analysis/tables" && log_info "Created symlink: t → ./analysis/tables" && ((created_count++))
    fi
    
    if [[ -d "./scripts" ]]; then
        ln -s ./scripts s && track_symlink "s" "./scripts" && log_info "Created symlink: s → ./scripts" && ((created_count++))
    fi
    
    if [[ -d "./man" ]]; then
        ln -s ./man m && track_symlink "m" "./man" && log_info "Created symlink: m → ./man" && ((created_count++))
    fi
    
    if [[ -d "./tests" ]]; then
        ln -s ./tests e && track_symlink "e" "./tests" && log_info "Created symlink: e → ./tests" && ((created_count++))
    fi
    
    if [[ -d "./docs" ]]; then
        ln -s ./docs o && track_symlink "o" "./docs" && log_info "Created symlink: o → ./docs" && ((created_count++))
    fi
    
    if [[ -d "./archive" ]]; then
        ln -s ./archive c && track_symlink "c" "./archive" && log_info "Created symlink: c → ./archive" && ((created_count++))
    fi
    
    if [[ -d "./analysis/report" ]]; then
        ln -s ./analysis/report p && track_symlink "p" "./analysis/report" && log_info "Created symlink: p → ./analysis/report" && ((created_count++))
    fi
    
    log_success "Symbolic links created ($created_count links)"
    log_info "Quick navigation: cd a (data), cd n (analysis), cd p (report), etc."
}

#=============================================================================
# STRUCTURE VALIDATION AND REPORTING
#=============================================================================

# Function: validate_directory_structure
# Purpose: Verify that all required directories were created successfully
# Returns: 0 if all directories exist, 1 if any are missing
validate_directory_structure() {
    log_info "Validating directory structure..."
    
    local -r required_dirs=(
        "R" "man" "tests/testthat" "vignettes" "data" "data/raw_data"
        "data/derived_data" "data/metadata" "data/validation" "analysis"
        "analysis/report" "analysis/figures" "analysis/tables" "analysis/templates"
        "scripts" "archive" "docs" ".github/workflows"
    )
    
    local missing_dirs=()
    for dir in "${required_dirs[@]}"; do
        if [[ ! -d "$dir" ]]; then
            missing_dirs+=("$dir")
        fi
    done
    
    if [[ ${#missing_dirs[@]} -eq 0 ]]; then
        log_success "All required directories exist"
        return 0
    else
        log_error "Missing directories: ${missing_dirs[*]}"
        return 1
    fi
}

# Function: show_structure_summary
# Purpose: Display a summary of the created project structure
show_structure_summary() {
    log_info "Project structure summary:"
    cat << 'EOF'
📁 PROJECT STRUCTURE CREATED:

├── R/                     # Package functions (exported to users)
├── man/                   # Manual pages (generated by roxygen2)  
├── tests/testthat/        # Unit tests using testthat framework
├── vignettes/             # Package vignettes and tutorials
├── data/                  # Data management
│   ├── raw_data/          # Original, unmodified datasets
│   ├── derived_data/      # Processed, analysis-ready data
│   ├── metadata/          # Data dictionaries and documentation
│   └── validation/        # Data quality reports
├── analysis/              # Research analysis workflow
│   ├── report/             # Research paper (Rmd → PDF)
│   ├── figures/           # Generated plots and visualizations
│   ├── tables/            # Generated statistical tables
│   └── templates/         # Analysis templates
├── scripts/               # Working R scripts and exploration
├── archive/               # Archived files and old versions
├── docs/                  # Project documentation
├── .github/workflows/     # GitHub Actions CI/CD pipelines
└── Symbolic links (a→data, n→analysis, p→paper, etc.)

🔗 QUICK NAVIGATION:
   cd a  →  data/           cd n  →  analysis/
   cd f  →  figures/        cd t  →  tables/
   cd s  →  scripts/        cd p  →  report/
   cd m  →  man/            cd e  →  tests/
   cd o  →  docs/           cd c  →  archive/
EOF
}

#=============================================================================
# STRUCTURE MODULE VALIDATION
#=============================================================================

# Validate that required manifest variables are available
if [[ -z "${MANIFEST_FILE:-}" ]]; then
    log_warn "MANIFEST_FILE not defined - tracking will be disabled"
fi

if [[ -z "${MANIFEST_TXT:-}" ]]; then
    log_warn "MANIFEST_TXT not defined - fallback tracking will be disabled"
fi

# Set structure module loaded flag
readonly ZZCOLLAB_STRUCTURE_LOADED=true

log_info "Structure module loaded successfully"