#!/bin/bash
##############################################################################
# ZZCOLLAB R PACKAGE MODULE
##############################################################################
# 
# PURPOSE: R package structure creation and management
#          - DESCRIPTION file with package metadata
#          - NAMESPACE file for exports
#          - R project file configuration
#          - Test infrastructure setup
#          - License and documentation
#          - renv package management setup
#
# DEPENDENCIES: core.sh (logging), templates.sh (file creation)
#
# TRACKING: All created files are tracked for uninstall capability
##############################################################################

# Validate required modules are loaded
require_module "core" "templates"

#=============================================================================
# MANIFEST TRACKING FUNCTIONS
#=============================================================================

# Tracking functions are now provided by core.sh

#=============================================================================
# R PACKAGE CORE FILES CREATION (extracted from lines 418-477)
#=============================================================================

# Function: create_core_files
# Purpose: Creates all essential R package files and structure
# Creates:
#   - DESCRIPTION file with package metadata
#   - LICENSE file with GPL-3 license information
#   - NAMESPACE file for function exports
#   - R project file (.Rproj) with development settings
#   - R utility functions from template
#   - Test infrastructure (testthat framework)
#   - Basic unit tests for included functions
#
# Dependencies: Requires PKG_NAME global variable to be set
# Template Usage: Uses DESCRIPTION and R/utils.R templates
# Tracking: All created files are tracked in manifest for uninstall
create_core_files() {
    local pkg_name="$PKG_NAME"
    local year=$(date +%Y)
    
    log_info "Creating core R package files..."
    
    # DESCRIPTION file - R package metadata and dependencies
    # Generate dynamic content based on build mode and config
    case "$BUILD_MODE" in
        fast)
            log_info "Creating dynamic DESCRIPTION with fast mode packages"
            ;;
        comprehensive)
            log_info "Creating dynamic DESCRIPTION with comprehensive mode packages"
            ;;
        *)
            log_info "Creating dynamic DESCRIPTION with standard mode packages"
            ;;
    esac
    
    # Check if config module is available for dynamic generation
    if [[ "${ZZCOLLAB_CONFIG_LOADED:-}" == "true" ]] && command -v generate_description_content >/dev/null 2>&1; then
        # Use dynamic generation with config system
        if generate_description_content "$BUILD_MODE" "$PKG_NAME" "$AUTHOR_NAME" "$AUTHOR_EMAIL" > "DESCRIPTION"; then
            track_file "DESCRIPTION"
            log_info "Created dynamic DESCRIPTION file with config-based packages"
        else
            log_error "Failed to generate dynamic DESCRIPTION file"
            return 1
        fi
    else
        # Fallback to template-based approach
        local description_template
        description_template=$(get_description_template)
        log_warning "Config module not available, using template fallback: $description_template"
        
        if ! install_template "$description_template" "DESCRIPTION" "DESCRIPTION file" "Created DESCRIPTION file from template"; then
            log_error "Failed to create DESCRIPTION file"
            return 1
        fi
    fi

    # .Rbuildignore file - Specifies files to exclude from R package build
    # Essential for excluding symbolic links and development files
    if ! install_template ".Rbuildignore" ".Rbuildignore" ".Rbuildignore file" "Created .Rbuildignore file with exclusion patterns"; then
        log_error "Failed to create .Rbuildignore file"
        return 1
    fi

    # LICENSE file - GPL-3 license information
    # Note: GPL-3 doesn't require a separate LICENSE file, but we create a reference note
    local license_content="This package is licensed under GPL-3.
See https://www.gnu.org/licenses/gpl-3.0.en.html for details."
    
    if create_file_if_missing "LICENSE" "$license_content" "LICENSE file"; then
        track_file "LICENSE"
        log_info "Created LICENSE file with GPL-3 reference"
    else
        log_error "Failed to create LICENSE file"
        return 1
    fi

    # NAMESPACE file - Controls which functions are exported to users
    # Generated by roxygen2, but we provide a basic version with essential exports
    local namespace_content="# Generated by roxygen2: do not edit by hand
"
    
    if create_file_if_missing "NAMESPACE" "$namespace_content" "NAMESPACE file"; then
        track_file "NAMESPACE"
        log_info "Created NAMESPACE file with function exports"
    else
        log_error "Failed to create NAMESPACE file"
        return 1
    fi

    # Copy R utility functions from template
    # Template contains example functions and proper roxygen2 documentation
    if ! install_template "R/utils.R" "R/utils.R" "R utility functions" "Created R utility functions from template"; then
        log_error "Failed to create R utility functions"
        return 1
    fi

    # Create R project file (.Rproj) - RStudio project configuration
    # Configures RStudio for package development with optimal settings
    local rproj_content="Version: 1.0

RestoreWorkspace: Default
SaveWorkspace: Default
AlwaysSaveHistory: Default

EnableCodeIndexing: Yes
UseSpacesForTab: Yes
NumSpacesForTab: 2
Encoding: UTF-8

RnwWeave: Sweave
LaTeX: pdfLaTeX

AutoAppendNewline: Yes
StripTrailingWhitespace: Yes

BuildType: Package
PackageUseDevtools: Yes
PackageInstallArgs: --no-multiarch --with-keep.source"
    
    if create_file_if_missing "${pkg_name}.Rproj" "$rproj_content" "R project file"; then
        track_file "${pkg_name}.Rproj"
        log_info "Created RStudio project file: ${pkg_name}.Rproj"
    else
        log_error "Failed to create R project file"
        return 1
    fi

    # Create test infrastructure using testthat framework
    # testthat is the standard R testing framework
    
    # Main test runner file
    # Ensures tests directory exists (should already exist from structure module)
    safe_mkdir "tests" "tests directory"
    local testthat_runner="library(testthat)
library($pkg_name)

test_check(\"$pkg_name\")"
    
    if create_file_if_missing "tests/testthat.R" "$testthat_runner" "testthat runner"; then
        track_file "tests/testthat.R"
        log_info "Created testthat test runner"
    else
        log_error "Failed to create testthat runner"
        return 1
    fi

    # Basic test file for utility functions
    # Ensures tests/testthat directory exists (should already exist from structure module)
    safe_mkdir "tests/testthat" "testthat directory"
    local test_utils="test_that(\"package loads correctly\", {
  expect_true(TRUE)
})"
    
    if create_file_if_missing "tests/testthat/test-utils.R" "$test_utils" "utility function tests"; then
        track_file "tests/testthat/test-utils.R"
        log_info "Created basic utility function tests"
    else
        log_error "Failed to create utility tests"
        return 1
    fi
    
    # Create integration tests directory and copy template integration tests
    safe_mkdir "tests/integration" "integration tests directory"
    
    # Copy integration test templates (optional)
    install_template "tests/integration/test-data-pipeline.R" "tests/integration/test-data-pipeline.R" "data pipeline integration tests" "Created data pipeline integration tests" || true
    
    install_template "tests/integration/test-analysis-scripts.R" "tests/integration/test-analysis-scripts.R" "analysis script integration tests" "Created analysis script integration tests" || true
    
    install_template "tests/integration/test-report-rendering.R" "tests/integration/test-report-rendering.R" "report rendering integration tests" "Created report rendering integration tests" || true
    
    log_success "R package core files created successfully"
}

#=============================================================================
# R ENVIRONMENT MANAGEMENT (extracted from lines 551-559)
#=============================================================================

# Function: create_renv_setup
# Purpose: Creates renv package management setup for reproducible environments
# Creates:
#   - setup_renv.R script for initializing renv
#   - Installs essential development packages
#   - Creates renv.lock for dependency tracking
#
# renv Benefits:
#   - Project-specific package libraries
#   - Reproducible package versions
#   - Dependency isolation from system R
#   - Easy collaboration with locked package versions
#
# Tracking: The setup script is tracked for uninstall
create_renv_setup() {
    log_info "Creating renv setup for package management..."
    
    # Create comprehensive renv setup script
    # This script initializes renv and installs essential packages for R development
    local renv_setup_content='# renv Setup Script
# This script initializes renv for reproducible package management

cat("Setting up renv for reproducible package management...\n")

# Install renv if not already available
if (!requireNamespace("renv", quietly = TRUE)) {
  cat("Installing renv package...\n")
  install.packages("renv")
}

# Initialize renv with explicit snapshot type
# explicit: Only packages explicitly referenced in DESCRIPTION or library() calls
cat("Initializing renv...\n")
renv::init(settings = list(snapshot.type = "explicit"))

# Essential packages for R package development
essential_packages <- c(
  "devtools",      # Package development tools
  "usethis",       # Project setup utilities  
  "roxygen2",      # Documentation generation
  "testthat",      # Unit testing framework
  "knitr",         # Dynamic report generation
  "rmarkdown",     # R Markdown documents
  "pkgdown",       # Package websites
  "here",          # Relative file paths
  "conflicted"     # Handle package conflicts
)

cat("Installing essential development packages...\n")
install.packages(essential_packages)

# Take snapshot to lock package versions
cat("Creating renv.lock snapshot...\n")
renv::snapshot()

cat("renv setup complete!\n")
cat("- Project library:", renv::paths$library(), "\n")
cat("- Lockfile created:", file.exists("renv.lock"), "\n")
cat("- Use renv::status() to check package synchronization\n")
cat("- Use renv::snapshot() to update lockfile after adding packages\n")'
    
    if create_file_if_missing "setup_renv.R" "$renv_setup_content" "renv setup script"; then
        track_file "setup_renv.R"
        log_success "Created renv setup script"
        log_info "Run 'Rscript setup_renv.R' to initialize package management"
    else
        log_error "Failed to create renv setup script"
        return 1
    fi
}

#=============================================================================
# R PACKAGE VALIDATION AND UTILITIES
#=============================================================================

# Function: validate_r_package_structure
# Purpose: Verify that all required R package files were created successfully
# Checks: DESCRIPTION, NAMESPACE, R/, tests/, .Rproj file
# Returns: 0 if all files exist, 1 if any are missing
validate_r_package_structure() {
    log_info "Validating R package structure..."
    
    local -r required_files=(
        "DESCRIPTION"
        ".Rbuildignore"
        "NAMESPACE" 
        "LICENSE"
        "R/utils.R"
        "tests/testthat.R"
        "tests/testthat/test-utils.R"
        "${PKG_NAME}.Rproj"
        "setup_renv.R"
    )
    
    local missing_files=()
    for file in "${required_files[@]}"; do
        if [[ ! -f "$file" ]]; then
            missing_files+=("$file")
        fi
    done
    
    if [[ ${#missing_files[@]} -eq 0 ]]; then
        log_success "All required R package files exist"
        return 0
    else
        log_error "Missing R package files: ${missing_files[*]}"
        return 1
    fi
}

# Function: show_rpackage_summary
# Purpose: Display summary of created R package structure and next steps
show_rpackage_summary() {
    log_info "R package structure summary:"
    cat << 'EOF'
📦 R PACKAGE STRUCTURE CREATED:

├── DESCRIPTION              # Package metadata and dependencies
├── .Rbuildignore           # Files to exclude from package build
├── NAMESPACE               # Function exports (managed by roxygen2)
├── LICENSE                 # GPL-3 license reference
├── setup_renv.R           # Package management initialization
├── [package-name].Rproj   # RStudio project configuration
├── R/
│   └── utils.R            # Package functions with documentation
└── tests/
    ├── testthat.R         # Test runner
    └── testthat/
        └── test-utils.R   # Unit tests for package functions

🔧 DEVELOPMENT WORKFLOW:
1. Run 'Rscript setup_renv.R' to initialize package management
2. Edit R/utils.R to add your package functions
3. Use roxygen2 comments to document functions
4. Run devtools::document() to update NAMESPACE and man/
5. Run devtools::test() to run unit tests
6. Run devtools::check() to validate package

📚 KEY COMMANDS:
- devtools::load_all()     # Load package for testing
- devtools::document()     # Generate documentation
- devtools::test()         # Run tests
- devtools::check()        # R CMD check
- renv::status()           # Check package synchronization
- renv::snapshot()         # Update lockfile
EOF
}

#=============================================================================
# RPACKAGE MODULE VALIDATION
#=============================================================================

# Validate that required manifest variables are available
if [[ -z "${MANIFEST_FILE:-}" ]]; then
    log_warn "MANIFEST_FILE not defined - tracking will be disabled"
fi

if [[ -z "${PKG_NAME:-}" ]]; then
    log_error "PKG_NAME not defined - required for R package creation"
    exit 1
fi


