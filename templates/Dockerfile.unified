ARG BASE_IMAGE=rocker/r-ver
ARG R_VERSION
FROM ${BASE_IMAGE}:${R_VERSION}

# Build arguments for package selection
# Profile system: LIBS_BUNDLE and PKGS_BUNDLE are set by --profile-name
ARG LIBS_BUNDLE=minimal
ARG PKGS_BUNDLE=minimal
ARG TEAM_NAME=rgt47
ARG PROJECT_NAME=r-project
ARG ADDITIONAL_PACKAGES=""
ARG USERNAME=analyst
ARG ANALYST_PASSWORD

# Add PPAs with fallback strategy for latest versions
# This ensures we get updated packages when available, but gracefully
# falls back to Ubuntu repos if PPAs are unavailable
RUN apt-get update && \
    apt-get install -y software-properties-common && \
    # Vim PPA for latest version
    (add-apt-repository ppa:jonathonf/vim -y 2>/dev/null || echo "Vim PPA unavailable, using default repos") && \
    # R CRAN PPA for latest R packages
    (add-apt-repository ppa:c2d4u.team/c2d4u4.0+ -y 2>/dev/null || echo "R CRAN PPA unavailable, using default repos") && \
    # Git PPA for latest version
    (add-apt-repository ppa:git-core/ppa -y 2>/dev/null || echo "Git PPA unavailable, using default repos") && \
    # Kitty terminal emulator PPA for latest version
    (add-apt-repository ppa:yurivkhan/kitty -y 2>/dev/null || echo "Kitty PPA unavailable, using default repos") && \
    apt-get update && \
    rm -rf /var/lib/apt/lists/*

# Install system dependencies (common to all profiles)
#
# NOTE: rocker/r-ver base image already includes:
#   - Runtime libraries: libcurl4, zlib1g, libblas, liblapack
#   - Build tools: g++, gfortran, make
#   - But REMOVES development headers after building R
#
# This layer adds:
#   - Development headers (removed by rocker after R build)
#   - ZZCOLLAB framework tools (vim, tmux, zsh, etc.)
#   - Graphics libraries for R plotting
#
# Profile-specific deps (git, curl, wget, pandoc, etc.) are handled
# by bundle-specific installation from bundles.yaml below.
#
RUN apt-get update && \
    apt-get install -y \
    # Build tools (gcc, libc6-dev not in rocker)
    build-essential \
    # Development headers (removed by rocker after R build)
    libcurl4-openssl-dev \
    libssl-dev \
    libxml2-dev \
    # R package dependencies (devtools, httpuv, promises, shiny)
    libsodium-dev \
    libuv1-dev \
    # Graphics libraries for R plotting (ggplot2, base graphics)
    libfontconfig1-dev \
    libharfbuzz-dev \
    libfribidi-dev \
    libfreetype6-dev \
    libpng-dev \
    libtiff5-dev \
    libjpeg-dev \
    # Git integration for R packages
    libgit2-dev \
    # ZZCOLLAB framework tools (will use PPA versions if available)
    vim \
    zsh \
    ssh \
    tree \
    man-db \
    kitty \
    && rm -rf /var/lib/apt/lists/*

# Install sudo for analyst user access
RUN apt-get update && apt-get install -y sudo && rm -rf /var/lib/apt/lists/*

# Install bundle-specific system dependencies
# Command generated from bundles.yaml (single source of truth)
# Bundle: ${LIBS_BUNDLE}
RUN ${SYSTEM_DEPS_INSTALL_CMD}

# Install Node.js (required for coc.nvim and other vim plugins)
RUN curl -fsSL https://deb.nodesource.com/setup_lts.x | bash - && \
    apt-get install -y nodejs

# Install TinyTeX only for publishing profiles
# - Minimal, analysis, modeling profiles: NO (users can add manually)
# - Publishing profile: YES (requires PDF output)
# - Base images with LaTeX (verse, tidyverse): SKIP (already included)
RUN if [ "\${PKGS_BUNDLE}" = "publishing" ] || [ "\${LIBS_BUNDLE}" = "publishing" ]; then \
        if ! echo "\${BASE_IMAGE}" | grep -E "(verse|tidyverse)" >/dev/null; then \
            R -e "install.packages('tinytex')" && \
            R -e "tinytex::install_tinytex()" && \
            /root/.TinyTeX/bin/*/tlmgr path add; \
        fi; \
    fi

# Add metadata labels
LABEL maintainer="${TEAM_NAME}"
LABEL project="${PROJECT_NAME}"
LABEL libs.bundle="${LIBS_BUNDLE}"
LABEL pkgs.bundle="${PKGS_BUNDLE}"
LABEL org.opencontainers.image.title="ZZCOLLAB Docker Image"
LABEL org.opencontainers.image.description="R environment with \
      ${LIBS_BUNDLE} libraries and ${PKGS_BUNDLE} packages"
LABEL org.opencontainers.image.vendor="ZZCOLLAB"

# Create non-root user with zsh as default shell and sudo access
# Always create the user since we reference it throughout the Dockerfile
RUN useradd --create-home --shell /bin/zsh ${USERNAME} || \
    echo "User ${USERNAME} already exists" && \
    usermod -aG sudo ${USERNAME}

# Set analyst user password (provided via build argument)
# Build with: docker build --build-arg ANALYST_PASSWORD=yourpassword .
# If no password provided, user will have sudo access but no password set
#
# The analyst user can now use sudo:
#   sudo apt-get update
#   sudo apt-get install somepackage
#
# Security Note: The password is passed at build time and stored in the image layer.
# For production use, consider using Docker secrets or other secure methods.
# For development/research containers, this approach is convenient and acceptable.
RUN if [ -n "$ANALYST_PASSWORD" ]; then \
        echo "${USERNAME}:$ANALYST_PASSWORD" | chpasswd; \
    else \
        echo "WARNING: No ANALYST_PASSWORD provided. User has sudo access but no password set."; \
    fi

# Install R packages based on selected profile
# Command generated from bundles.yaml (single source of truth)
# Bundle: ${PKGS_BUNDLE}
# Uses install2.r for pre-compiled binaries from Posit PPM (much faster than source)
RUN ${R_PACKAGES_INSTALL_CMD}

# Give user write permission to R library directory
RUN chown -R ${USERNAME}:${USERNAME} /usr/local/lib/R/site-library

# Set working directory and ensure user owns it
WORKDIR /home/${USERNAME}/project
RUN chown -R ${USERNAME}:${USERNAME} /home/${USERNAME}/project

# Copy project files first (for better Docker layer caching)
COPY --chown=${USERNAME}:${USERNAME} DESCRIPTION .
COPY --chown=${USERNAME}:${USERNAME} renv.lock* ./
COPY --chown=${USERNAME}:${USERNAME} .Rprofile* ./
COPY --chown=${USERNAME}:${USERNAME} setup_renv.R* ./

# Switch to non-root user for R package installation
USER ${USERNAME}

# Copy dotfiles (consolidated with wildcards)
# Note: .zshrc copied directly from dotfiles directory (no filtering)
COPY --chown=${USERNAME}:${USERNAME} .vimrc* .gitconfig* \
     .zshrc* .inputrc* .bashrc* .profile* .aliases* .functions* .exports* \
     .editorconfig* .ctags* .ackrc* .ripgreprc* /home/${USERNAME}/

# Install zsh plugins
RUN mkdir -p /home/${USERNAME}/.zsh && \
    git clone https://github.com/zsh-users/zsh-autosuggestions \
     /home/${USERNAME}/.zsh/zsh-autosuggestions && \
    git clone https://github.com/zsh-users/zsh-syntax-highlighting \
     /home/${USERNAME}/.zsh/zsh-syntax-highlighting

# Install vim-plug
RUN curl -fLo /home/${USERNAME}/.vim/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

# Install vim plugins (suppress interactive mode)
RUN vim +PlugInstall +qall || true

# Copy rest of project
COPY --chown=${USERNAME}:${USERNAME} . .

# Install the research compendium as a package (analyst has write
# permissions)
# Use standard R installation approach that works with any R setup
RUN R -e "install.packages('.', repos = NULL, type = 'source', \
           dependencies = TRUE)"

# Set default shell and working directory
WORKDIR /home/${USERNAME}/project
CMD ["/bin/zsh"]