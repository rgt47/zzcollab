#=================================================================
# ZZCOLLAB Unified Dockerfile Template (v2.1 - Optimized)
#=================================================================
#
# This file is a TEMPLATE processed by zzcollab.sh
# DO NOT docker build this file directly - it contains
# placeholder variables that must be substituted first.
#
# Template variables (substituted by zzcollab.sh):
#   ${SYSTEM_DEPS_INSTALL_CMD} - System package installation
#   ${R_PACKAGES_INSTALL_CMD}  - R package installation
#
# Build arguments (set at build time):
#   BASE_IMAGE         - Docker base image (e.g., rocker/r-ver)
#   R_VERSION          - R version tag (e.g., 4.4.0, latest)
#   LIBS_BUNDLE        - System library bundle (minimal, geospatial, etc.)
#   PKGS_BUNDLE        - R package bundle (minimal, analysis, etc.)
#   USERNAME           - Non-root user name (default: analyst)
#   TEAM_NAME          - Team/organization name
#   PROJECT_NAME       - Project name
#
# Security: Passwords are generated at runtime and logged to stdout
#           Change the generated password after first login
#
# Generated by: zzcollab.sh
#=================================================================

# Enable BuildKit for cache mounts and better performance
# syntax=docker/dockerfile:1.4

ARG BASE_IMAGE=rocker/r-ver
ARG R_VERSION
FROM ${BASE_IMAGE}:${R_VERSION}

# NOTE: BASE_IMAGE and R_VERSION ARGs used above for
# flexibility. Generated by zzcollab based on profile selection
# Supports multiple base images: rocker/r-ver, rocker/verse,
# rocker/geospatial, etc.

# Build arguments for package selection
# Profile system: LIBS_BUNDLE and PKGS_BUNDLE are set by
# --profile-name
ARG LIBS_BUNDLE=minimal
ARG PKGS_BUNDLE=minimal
ARG TEAM_NAME=rgt47
ARG PROJECT_NAME=r-project
ARG ADDITIONAL_PACKAGES=""
ARG USERNAME=analyst
ARG TARGETPLATFORM

#=================================================================
# SYSTEM DEPENDENCIES LAYER
#=================================================================
# Install all system dependencies in a single consolidated layer
# EFFICIENCY IMPROVEMENT: Consolidated r2u + PPA setup with main
# apt installation
#   - Reduces from 2 layers to 1 layer
#   - Only one apt-get update instead of two
#   - Better layer caching (PPA failures don't invalidate
#     package cache)
# EFFICIENCY: --no-install-recommends reduces image size by
#   ~100-200MB by skipping suggested packages that aren't
#   strictly required
#
# NOTE: rocker/r-ver base image already includes:
#   - Runtime libraries: libcurl4, zlib1g, libblas, liblapack
#   - Build tools: g++, gfortran, make
#   - But REMOVES development headers after building R
#
# BINARY R PACKAGES: Using r2u (successor to c2d4u PPA)
#   - r2u provides binary packages for ALL CRAN packages on
#     Ubuntu 20.04/22.04/24.04
#   - Maintained by Dirk Eddelbuettel:
#     https://eddelbuettel.github.io/r2u/
#   - Much faster than source installation via
#     install.packages()
#   - c2d4u PPA is deprecated and doesn't support Ubuntu Noble
#     (24.04)
#
# REPRODUCIBILITY NOTE: r2u and Maximum Reproducibility
#   - r2u binaries track CRAN closely (usually within 24
#     hours)
#   - For MAXIMUM reproducibility, use RSPM snapshots instead
#     (configured later)
#   - Tradeoff: Speed (r2u binaries) vs Exact reproducibility
#     (RSPM snapshots)
#   - Current choice: r2u for system packages, RSPM for
#     renv-managed packages
#
# This consolidated layer:
#   1. Sets up r2u repository for binary R packages
#   2. Adds git-core PPA for latest git
#   3. Installs all dependencies in one operation
#   4. Cleans up apt lists
#
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt/lists,sharing=locked \
    apt-get update && \
    apt-get install -y --no-install-recommends \
      software-properties-common wget && \
    # Add r2u repository for binary R packages (replaces c2d4u)
    wget -q -O- \
      https://eddelbuettel.github.io/r2u/assets/\
dirk_eddelbuettel_key.asc | \
      tee -a /etc/apt/trusted.gpg.d/cranapt_key.asc && \
    echo "deb [arch=amd64,arm64] \
https://r2u.stat.illinois.edu/ubuntu noble main" > \
      /etc/apt/sources.list.d/cranapt.list && \
    # Add git-core PPA for latest git (Noble 24.04 supported)
    (add-apt-repository ppa:git-core/ppa -y 2>/dev/null || \
      echo "Git PPA unavailable, using default repos") && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
    # Build tools (gcc, libc6-dev not in rocker)
    build-essential \
    # Development headers (removed by rocker after R build)
    libcurl4-openssl-dev \
    libssl-dev \
    libxml2-dev \
    # R package dependencies (devtools, httpuv, promises,
    # shiny)
    libsodium-dev \
    libuv1-dev \
    # Graphics libraries for R plotting (ggplot2, base
    # graphics)
    libfontconfig1-dev \
    libharfbuzz-dev \
    libfribidi-dev \
    libfreetype6-dev \
    libpng-dev \
    libtiff5-dev \
    libjpeg-dev \
    # Git integration for R packages
    libgit2-dev \
    # ZZCOLLAB framework tools (will use PPA versions if
    # available)
    git \
    vim \
    tmux \
    zsh \
    ssh \
    tree \
    man-db \
    sudo \
    curl \
    wget \
    unzip \
    && rm -rf /var/lib/apt/lists/*

#=================================================================
# PLATFORM COMPATIBILITY CHECK
#=================================================================
# Warn if incompatible platform/base image combination
RUN if [ "${TARGETPLATFORM}" = "linux/arm64" ]; then \
        case "${BASE_IMAGE}" in \
            *verse*|*geospatial*|*shiny*) \
                echo "=====================================================" >&2; \
                echo "WARNING: ${BASE_IMAGE} may not support ARM64" >&2; \
                echo "Consider using rocker/rstudio or rocker/tidyverse" >&2; \
                echo "See docs/DOCKER_ARCHITECTURE.md for details" >&2; \
                echo "=====================================================" >&2; \
                ;; \
        esac; \
    fi

#=================================================================
# BUNDLE-SPECIFIC SYSTEM DEPENDENCIES
#=================================================================
# Command generated from bundles.yaml (single source of truth)
# Bundle: ${LIBS_BUNDLE}
RUN ${SYSTEM_DEPS_INSTALL_CMD}

#=================================================================
# NODE.JS INSTALLATION
#=================================================================
# Install Node.js (required for coc.nvim and other vim
# plugins)
# EFFICIENCY: Clean up apt lists to reduce layer size (~50MB
# savings)
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt/lists,sharing=locked \
    curl -fsSL https://deb.nodesource.com/setup_lts.x | \
      bash - && \
    apt-get install -y --no-install-recommends nodejs && \
    rm -rf /var/lib/apt/lists/*

#=================================================================
# NERD FONTS INSTALLATION (CONDITIONAL)
#=================================================================
# Install Nerd Fonts (required for vim-airline and other
# plugins with icons)
# Only installed for profiles with GUI support (terminals, gui
# bundles)
# SAFETY: Pinned to v3.3.0 release (latest stable as of
#   2025-10-23)
#   - Using 'latest' in URL is security risk (no version
#     control)
#   - Specific version ensures reproducible builds
#   - Update version when you want newer fonts
# EFFICIENCY: Only extract .ttf files, exclude unnecessary
#   files (Windows, OTF variants)
#   - Saves ~100MB per font by excluding .otf and extra
#     metadata
RUN case "${LIBS_BUNDLE}" in \
        terminals|gui|gui_minimal) \
            NERD_FONT_VERSION=v3.3.0 && \
            mkdir -p /usr/local/share/fonts/nerd-fonts && \
            cd /usr/local/share/fonts/nerd-fonts && \
            # JetBrains Mono Nerd Font
            curl -fLo "JetBrainsMono.zip" \
              "https://github.com/ryanoasis/nerd-fonts/releases/\
download/${NERD_FONT_VERSION}/JetBrainsMono.zip" && \
            unzip -q -j JetBrainsMono.zip "*.ttf" && \
            rm JetBrainsMono.zip && \
            # Fira Code Nerd Font
            curl -fLo "FiraCode.zip" \
              "https://github.com/ryanoasis/nerd-fonts/releases/\
download/${NERD_FONT_VERSION}/FiraCode.zip" && \
            unzip -q -j FiraCode.zip "*.ttf" && \
            rm FiraCode.zip && \
            # Hack Nerd Font
            curl -fLo "Hack.zip" \
              "https://github.com/ryanoasis/nerd-fonts/releases/\
download/${NERD_FONT_VERSION}/Hack.zip" && \
            unzip -q -j Hack.zip "*.ttf" && rm Hack.zip && \
            # DejaVu Sans Mono Nerd Font
            curl -fLo "DejaVuSansMono.zip" \
              "https://github.com/ryanoasis/nerd-fonts/releases/\
download/${NERD_FONT_VERSION}/DejaVuSansMono.zip" && \
            unzip -q -j DejaVuSansMono.zip "*.ttf" && \
            rm DejaVuSansMono.zip && \
            # Update font cache
            fc-cache -fv \
            ;; \
        *) \
            echo "Skipping Nerd Fonts installation (not needed \
for ${LIBS_BUNDLE} profile)" \
            ;; \
    esac

#=================================================================
# TINYTEX INSTALLATION (CONDITIONAL)
#=================================================================
# Install TinyTeX only for publishing profiles
# - Minimal, analysis, modeling profiles: NO (users can add
#   manually)
# - Publishing profile: YES (requires PDF output)
# - Base images with LaTeX (verse, tidyverse): SKIP (already
#   included)
RUN case "${PKGS_BUNDLE}" in \
        publishing) \
            case "${BASE_IMAGE}" in \
                *verse*|*tidyverse*) \
                    echo "LaTeX already included in ${BASE_IMAGE}, skipping TinyTeX" \
                    ;; \
                *) \
                    R -e "install.packages('tinytex')" && \
                    R -e "tinytex::install_tinytex()" && \
                    /root/.TinyTeX/bin/*/tlmgr path add \
                    ;; \
            esac \
            ;; \
        *) \
            case "${LIBS_BUNDLE}" in \
                publishing) \
                    case "${BASE_IMAGE}" in \
                        *verse*|*tidyverse*) \
                            echo "LaTeX already included in ${BASE_IMAGE}, skipping TinyTeX" \
                            ;; \
                        *) \
                            R -e "install.packages('tinytex')" && \
                            R -e "tinytex::install_tinytex()" && \
                            /root/.TinyTeX/bin/*/tlmgr path add \
                            ;; \
                    esac \
                    ;; \
            esac \
            ;; \
    esac

#=================================================================
# USER CREATION
#=================================================================
# Create non-root user with zsh as default shell and sudo
# access. Always create the user since we reference it
# throughout the Dockerfile
# SECURITY: User gets sudo access for package installation
#   - Development mode: passwordless sudo with logging
#   - Production mode: comment out sudo line for no sudo access
RUN (useradd --create-home --shell /bin/zsh ${USERNAME} || \
        echo "User ${USERNAME} already exists") && \
    usermod -aG sudo ${USERNAME} && \
    echo "${USERNAME} ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/${USERNAME} && \
    chmod 0440 /etc/sudoers.d/${USERNAME}

#=================================================================
# PASSWORD GENERATION (SECURE METHOD)
#=================================================================
# Generate random password at build time and display it
# SECURITY: Password generated during build, not passed as arg
#   - More secure than ARG ANALYST_PASSWORD (not in image history)
#   - Password displayed in build output (save it!)
#   - Change password after first login for production use
RUN PASSWORD=$(openssl rand -base64 12) && \
    echo "${USERNAME}:${PASSWORD}" | chpasswd && \
    echo "=============================================" && \
    echo "Generated password for user: ${USERNAME}" && \
    echo "Password: ${PASSWORD}" && \
    echo "=============================================" && \
    echo "IMPORTANT: Save this password!" && \
    echo "Change it after first login with: passwd" && \
    echo "============================================="

#=================================================================
# DOTFILES INSTALLATION
#=================================================================
# Copy dotfiles BEFORE renv.lock for better layer caching
# Changes to dotfiles don't invalidate R package cache
# Note: .zshrc copied directly from dotfiles directory (no
# filtering)
COPY --chown=${USERNAME}:${USERNAME} .vimrc* .gitconfig* \
     .tmux.conf* .zshrc* .inputrc* .bashrc* .profile* \
     .aliases* .functions* .exports* .editorconfig* .ctags* \
     .ackrc* .ripgreprc* /home/${USERNAME}/

# Copy .config directory (XDG Base Directory Specification)
# Includes terminator and other XDG-compliant configs from
# dotfiles
COPY --chown=${USERNAME}:${USERNAME} .config* \
     /home/${USERNAME}/.config

#=================================================================
# ZSH PLUGINS INSTALLATION
#=================================================================
# Install zsh plugins
# EFFICIENCY: Shallow clone (--depth 1) reduces download size
#   by ~90%
#   - Only fetches latest commit instead of full git history
#   - zsh-autosuggestions: ~300KB vs ~3MB (full history)
#   - zsh-syntax-highlighting: ~500KB vs ~5MB (full history)
# SAFETY FIX: Pinned to specific release tags (as of
#   2025-10-23)
#   - Using HEAD/master can change unexpectedly
#   - Specific tags ensure reproducible builds
#   - Update tags when you want newer plugin features
RUN ZSH_AUTOSUGGESTIONS_VERSION=v0.7.1 && \
    ZSH_SYNTAX_VERSION=0.8.0 && \
    mkdir -p /home/${USERNAME}/.zsh && \
    git clone --depth 1 \
      --branch ${ZSH_AUTOSUGGESTIONS_VERSION} \
      https://github.com/zsh-users/zsh-autosuggestions \
      /home/${USERNAME}/.zsh/zsh-autosuggestions && \
    git clone --depth 1 \
      --branch ${ZSH_SYNTAX_VERSION} \
      https://github.com/zsh-users/zsh-syntax-highlighting \
      /home/${USERNAME}/.zsh/zsh-syntax-highlighting && \
    chown -R ${USERNAME}:${USERNAME} /home/${USERNAME}/.zsh

#=================================================================
# VIM PLUGIN MANAGER INSTALLATION
#=================================================================
# Install vim-plug
# SAFETY FIX: Pinned to v0.14.0 release (latest stable as of
#   2025-10-23)
#   - Using 'master' branch is security risk (can change
#     unexpectedly)
#   - Specific version ensures reproducible builds
#   - Update version when you want newer vim-plug features
RUN VIM_PLUG_VERSION=0.14.0 && \
    mkdir -p /home/${USERNAME}/.vim/autoload && \
    curl -fLo /home/${USERNAME}/.vim/autoload/plug.vim \
      --create-dirs \
      "https://raw.githubusercontent.com/junegunn/vim-plug/\
${VIM_PLUG_VERSION}/plug.vim" && \
    chown -R ${USERNAME}:${USERNAME} /home/${USERNAME}/.vim

#=================================================================
# WORKDIR SETUP
#=================================================================
# Set working directory and ensure user owns it
WORKDIR /home/${USERNAME}/project
RUN chown -R ${USERNAME}:${USERNAME} \
      /home/${USERNAME}/project

#=================================================================
# RENV.LOCK AND RSPM CONFIGURATION
#=================================================================
# Copy renv.lock FIRST to extract its modification date for
# RSPM snapshot
# CRITICAL: RSPM snapshot date must match when renv.lock was
#   generated
#   - This ensures package versions in renv.lock are available
#     in RSPM
#   - Using file modification date makes this automatic and
#     self-maintaining
#   - This is ESSENTIAL for the Five Pillars of Reproducibility
#     (renv.lock is source of truth)
COPY --chown=${USERNAME}:${USERNAME} renv.lock* ./

# Configure repositories: RSPM with binary packages
# Use a known good date (2024-10-26) to ensure packages are available
# RSPM CONFIGURATION: Using fixed date for reproducibility
#   - Date: 2024-10-26 (known good snapshot)
#   - Removed pkgType option (causes errors on Linux)
#   - HTTPUserAgent configuration for compatibility
#   - Ensures binary package availability for fast installation
#   - Part of the Five Pillars of Reproducibility framework
RUN UBUNTU_CODENAME=$(. /etc/os-release && echo $VERSION_CODENAME) && \
    echo "======================================" && \
    echo "RSPM snapshot date: 2024-10-26" && \
    echo "Ubuntu codename: ${UBUNTU_CODENAME}" && \
    echo "======================================" && \
    echo "# RSPM snapshot set to 2024-10-26 (${UBUNTU_CODENAME})" \
        >> /usr/local/lib/R/etc/Rprofile.site && \
    echo "options(repos = c(" \
        "CRAN = 'https://packagemanager.posit.co/cran/__linux__/${UBUNTU_CODENAME}/2024-10-26'))" \
        >> /usr/local/lib/R/etc/Rprofile.site && \
    echo "options(HTTPUserAgent = sprintf('R/%s R (%s)', getRversion(), paste(getRversion(), R.version\$platform, R.version\$arch, R.version\$os)))" \
        >> /usr/local/lib/R/etc/Rprofile.site

#=================================================================
# PROJECT METADATA FILES
#=================================================================
# Copy remaining project metadata files (for better Docker layer
# caching)
COPY --chown=${USERNAME}:${USERNAME} DESCRIPTION .
COPY --chown=${USERNAME}:${USERNAME} .Rprofile* ./
COPY --chown=${USERNAME}:${USERNAME} setup_renv.R* ./

#=================================================================
# R FRAMEWORK PACKAGES INSTALLATION
#=================================================================
# Switch to non-root user for R package installation
USER ${USERNAME}

# Install R framework packages (renv, devtools, etc)
# Command generated from bundles.yaml (single source of truth)
# Bundle: ${PKGS_BUNDLE}
# NOTE: Framework packages installed here with latest RSPM
#   snapshot
#   - These are development tools, not analysis dependencies
#   - Analysis dependencies are managed by renv.lock (installed
#     later)
#   - RSPM will be reconfigured above to match renv.lock date
RUN ${R_PACKAGES_INSTALL_CMD}

# Give user write permission to R library directory
USER root
RUN chown -R ${USERNAME}:${USERNAME} \
      /usr/local/lib/R/site-library
USER ${USERNAME}

#=================================================================
# VIM PLUGINS INSTALLATION
#=================================================================
# Install vim plugins (suppress interactive mode with timeout)
# Better error handling than || true
RUN set -e; \
    timeout 300 vim +PlugInstall +qall 2>&1 | tee /tmp/vim-install.log || { \
        echo "WARNING: Vim plugin installation failed or timed out" >&2; \
        echo "Check /tmp/vim-install.log for details" >&2; \
        echo "This is non-fatal, continuing build..." >&2; \
    }

#=================================================================
# PROJECT FILES AND R PACKAGE INSTALLATION
#=================================================================
# Copy rest of project (invalidates cache on any code change)
COPY --chown=${USERNAME}:${USERNAME} . .

# Restore renv dependencies before installing the package
# CRITICAL: This uses the RSPM snapshot configured above based
#   on renv.lock date
#   - Ensures binary package availability for fast installation
#   - Part of the Five Pillars of Reproducibility framework
RUN R -e "renv::restore()"

# Install the research compendium as a package (analyst has
# write permissions)
# Use standard R installation approach that works with any R
# setup
RUN R -e "install.packages('.', repos = NULL, \
           type = 'source', dependencies = TRUE)"

#=================================================================
# METADATA LABELS (OCI Standard)
#=================================================================
LABEL org.opencontainers.image.title="ZZCOLLAB Research Environment" \
      org.opencontainers.image.description="Reproducible R environment with ${LIBS_BUNDLE} libraries and ${PKGS_BUNDLE} packages" \
      org.opencontainers.image.vendor="ZZCOLLAB" \
      org.opencontainers.image.authors="${TEAM_NAME}" \
      org.opencontainers.image.source="https://github.com/${TEAM_NAME}/${PROJECT_NAME}" \
      org.opencontainers.image.licenses="MIT" \
      maintainer="${TEAM_NAME}" \
      project="${PROJECT_NAME}" \
      zzcollab.profile.libs="${LIBS_BUNDLE}" \
      zzcollab.profile.pkgs="${PKGS_BUNDLE}"

#=================================================================
# HEALTHCHECK (for RStudio/Shiny services)
#=================================================================
# Uncomment for RStudio Server profiles
# HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \
#     CMD curl -f http://localhost:8787/ || exit 1

#=================================================================
# FINAL CONFIGURATION
#=================================================================
# Copy and configure ZZCOLLAB entrypoint for auto-snapshot on exit
COPY zzcollab-entrypoint.sh /usr/local/bin/zzcollab-entrypoint.sh
RUN chmod +x /usr/local/bin/zzcollab-entrypoint.sh

# Set default shell and working directory
WORKDIR /home/${USERNAME}/project

ENTRYPOINT ["/usr/local/bin/zzcollab-entrypoint.sh"]
CMD ["/bin/zsh"]
