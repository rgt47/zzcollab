ARG BASE_IMAGE=rocker/r-ver
ARG R_VERSION
FROM ${BASE_IMAGE}:${R_VERSION}

# NOTE: BASE_IMAGE and R_VERSION ARGs used above for flexibility
# Generated by zzcollab based on profile selection
# Supports multiple base images: rocker/r-ver, rocker/verse, rocker/geospatial, etc.

# Build arguments for package selection
# Profile system: LIBS_BUNDLE and PKGS_BUNDLE are set by --profile-name
ARG LIBS_BUNDLE=minimal
ARG PKGS_BUNDLE=minimal
ARG TEAM_NAME=rgt47
ARG PROJECT_NAME=r-project
ARG ADDITIONAL_PACKAGES=""
ARG USERNAME=analyst
ARG ANALYST_PASSWORD

# Install all system dependencies in a single consolidated layer
# EFFICIENCY IMPROVEMENT: Consolidated PPA setup with main apt installation
#   - Reduces from 2 layers to 1 layer
#   - Only one apt-get update instead of two
#   - Better layer caching (PPA failures don't invalidate package cache)
# EFFICIENCY: --no-install-recommends reduces image size by ~100-200MB
#   by skipping suggested packages that aren't strictly required
#
# NOTE: rocker/r-ver base image already includes:
#   - Runtime libraries: libcurl4, zlib1g, libblas, liblapack
#   - Build tools: g++, gfortran, make
#   - But REMOVES development headers after building R
#
# REPRODUCIBILITY NOTE: PPAs and Maximum Reproducibility
#   - PPAs provide latest versions of vim, git, R packages (desirable for development)
#   - BUT: PPA versions can change over time, reducing 5-year reproducibility
#   - For MAXIMUM reproducibility, consider removing PPA lines below (lines 38-40)
#   - Without PPAs: Ubuntu's stable repos provide frozen versions (tied to Ubuntu release)
#   - Tradeoff: Convenience (latest tools) vs Reproducibility (frozen versions)
#   - Current choice: Keep PPAs for better development experience
#
# This consolidated layer:
#   1. Adds PPAs (vim, git, R packages) with graceful fallback
#   2. Installs all dependencies in one operation
#   3. Cleans up apt lists
#
RUN apt-get update && \
    apt-get install -y --no-install-recommends software-properties-common && \
    # Add PPAs with fallback strategy for latest versions
    # NOTE: Comment out these 3 lines for maximum reproducibility
    (add-apt-repository ppa:jonathonf/vim -y 2>/dev/null || echo "Vim PPA unavailable, using default repos") && \
    (add-apt-repository ppa:c2d4u.team/c2d4u4.0+ -y 2>/dev/null || echo "R CRAN PPA unavailable, using default repos") && \
    (add-apt-repository ppa:git-core/ppa -y 2>/dev/null || echo "Git PPA unavailable, using default repos") && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
    # Build tools (gcc, libc6-dev not in rocker)
    build-essential \
    # Development headers (removed by rocker after R build)
    libcurl4-openssl-dev \
    libssl-dev \
    libxml2-dev \
    # R package dependencies (devtools, httpuv, promises, shiny)
    libsodium-dev \
    libuv1-dev \
    # Graphics libraries for R plotting (ggplot2, base graphics)
    libfontconfig1-dev \
    libharfbuzz-dev \
    libfribidi-dev \
    libfreetype6-dev \
    libpng-dev \
    libtiff5-dev \
    libjpeg-dev \
    # Git integration for R packages
    libgit2-dev \
    # ZZCOLLAB framework tools (will use PPA versions if available)
    vim \
    zsh \
    ssh \
    tree \
    man-db \
    sudo \
    # X11 terminal emulators (work with XQuartz on macOS)
    xfce4-terminal \
    terminator \
    xterm \
    # Popular monospaced fonts for terminal and coding
    fonts-jetbrains-mono \
    fonts-firacode \
    fonts-hack \
    fonts-dejavu \
    fonts-liberation-mono \
    && rm -rf /var/lib/apt/lists/*

# Install bundle-specific system dependencies
# Command generated from bundles.yaml (single source of truth)
# Bundle: ${LIBS_BUNDLE}
RUN ${SYSTEM_DEPS_INSTALL_CMD}

# Install Node.js (required for coc.nvim and other vim plugins)
# EFFICIENCY: Clean up apt lists to reduce layer size (~50MB savings)
RUN curl -fsSL https://deb.nodesource.com/setup_lts.x | bash - && \
    apt-get install -y --no-install-recommends nodejs && \
    rm -rf /var/lib/apt/lists/*

# Install Nerd Fonts (required for vim-airline and other plugins with icons)
# SAFETY: Pinned to v3.3.0 release (latest stable as of 2025-10-23)
#   - Using 'latest' in URL is security risk (no version control)
#   - Specific version ensures reproducible builds
#   - Update version when you want newer fonts
# EFFICIENCY: Only extract .ttf files, exclude unnecessary files (Windows, OTF variants)
#   - Saves ~100MB per font by excluding .otf and extra metadata
RUN NERD_FONT_VERSION=v3.3.0 && \
    mkdir -p /usr/local/share/fonts/nerd-fonts && \
    cd /usr/local/share/fonts/nerd-fonts && \
    # JetBrains Mono Nerd Font
    curl -fLo "JetBrainsMono.zip" "https://github.com/ryanoasis/nerd-fonts/releases/download/${NERD_FONT_VERSION}/JetBrainsMono.zip" && \
    unzip -q -j JetBrainsMono.zip "*.ttf" && rm JetBrainsMono.zip && \
    # Fira Code Nerd Font
    curl -fLo "FiraCode.zip" "https://github.com/ryanoasis/nerd-fonts/releases/download/${NERD_FONT_VERSION}/FiraCode.zip" && \
    unzip -q -j FiraCode.zip "*.ttf" && rm FiraCode.zip && \
    # Hack Nerd Font
    curl -fLo "Hack.zip" "https://github.com/ryanoasis/nerd-fonts/releases/download/${NERD_FONT_VERSION}/Hack.zip" && \
    unzip -q -j Hack.zip "*.ttf" && rm Hack.zip && \
    # DejaVu Sans Mono Nerd Font
    curl -fLo "DejaVuSansMono.zip" "https://github.com/ryanoasis/nerd-fonts/releases/download/${NERD_FONT_VERSION}/DejaVuSansMono.zip" && \
    unzip -q -j DejaVuSansMono.zip "*.ttf" && rm DejaVuSansMono.zip && \
    # Update font cache
    fc-cache -fv

# Install TinyTeX only for publishing profiles
# - Minimal, analysis, modeling profiles: NO (users can add manually)
# - Publishing profile: YES (requires PDF output)
# - Base images with LaTeX (verse, tidyverse): SKIP (already included)
# BUG FIX: Re-declare ARGs for use in RUN context, fix variable expansion
ARG LIBS_BUNDLE
ARG PKGS_BUNDLE
ARG BASE_IMAGE
RUN if [ "${PKGS_BUNDLE}" = "publishing" ] || [ "${LIBS_BUNDLE}" = "publishing" ]; then \
        if ! echo "${BASE_IMAGE}" | grep -E "(verse|tidyverse)" >/dev/null; then \
            R -e "install.packages('tinytex')" && \
            R -e "tinytex::install_tinytex()" && \
            /root/.TinyTeX/bin/*/tlmgr path add; \
        fi; \
    fi

# Add metadata labels
LABEL maintainer="${TEAM_NAME}"
LABEL project="${PROJECT_NAME}"
LABEL libs.bundle="${LIBS_BUNDLE}"
LABEL pkgs.bundle="${PKGS_BUNDLE}"
LABEL org.opencontainers.image.title="ZZCOLLAB Docker Image"
LABEL org.opencontainers.image.description="R environment with \
      ${LIBS_BUNDLE} libraries and ${PKGS_BUNDLE} packages"
LABEL org.opencontainers.image.vendor="ZZCOLLAB"

# Create non-root user with zsh as default shell and sudo access
# Always create the user since we reference it throughout the Dockerfile
# BUG FIX: Wrapped useradd in parentheses so usermod only runs after success/already-exists
#   Previous logic: usermod ran even on other failures (e.g., permission denied)
RUN (useradd --create-home --shell /bin/zsh ${USERNAME} || \
    echo "User ${USERNAME} already exists") && \
    usermod -aG sudo ${USERNAME}

# Set analyst user password (provided via build argument)
# Build with: docker build --build-arg ANALYST_PASSWORD=yourpassword .
# If no password provided, user will have sudo access but no password set
#
# The analyst user can now use sudo:
#   sudo apt-get update
#   sudo apt-get install somepackage
#
# Security Note: The password is passed at build time and stored in the image layer.
# For production use, consider using Docker secrets or other secure methods.
# For development/research containers, this approach is convenient and acceptable.
RUN if [ -n "$ANALYST_PASSWORD" ]; then \
        echo "${USERNAME}:$ANALYST_PASSWORD" | chpasswd; \
    else \
        echo "WARNING: No ANALYST_PASSWORD provided. User has sudo access but no password set."; \
    fi

# Install R framework packages (renv, devtools, etc)
# Command generated from bundles.yaml (single source of truth)
# Bundle: ${PKGS_BUNDLE}
# NOTE: Framework packages installed here with latest RSPM snapshot
#   - These are development tools, not analysis dependencies
#   - Analysis dependencies are managed by renv.lock (installed later)
#   - RSPM will be reconfigured below to match renv.lock date
RUN ${R_PACKAGES_INSTALL_CMD}

# Give user write permission to R library directory
RUN chown -R ${USERNAME}:${USERNAME} /usr/local/lib/R/site-library

# Set working directory and ensure user owns it
WORKDIR /home/${USERNAME}/project
RUN chown -R ${USERNAME}:${USERNAME} /home/${USERNAME}/project

# Copy renv.lock FIRST to extract its modification date for RSPM snapshot
# CRITICAL: RSPM snapshot date must match when renv.lock was generated
#   - This ensures package versions in renv.lock are available in RSPM
#   - Using file modification date makes this automatic and self-maintaining
#   - This is ESSENTIAL for the Five Pillars of Reproducibility (renv.lock is source of truth)
COPY --chown=${USERNAME}:${USERNAME} renv.lock* ./

# Extract renv.lock modification date and configure RSPM dynamically
# AUTOMATIC RSPM DATE: Reads renv.lock file date, no manual updates needed
#   - When you update renv.lock, RSPM date updates automatically
#   - Ensures 5-year reproducibility: exact package versions available
#   - Fallback to 'latest' if renv.lock doesn't exist (development mode)
#   - Detects Ubuntu version (jammy/focal) automatically for RSPM URL
RUN if [ -f renv.lock ]; then \
        RENV_DATE=$(date -r renv.lock +%Y-%m-%d 2>/dev/null || stat -c %y renv.lock | cut -d' ' -f1) && \
        UBUNTU_CODENAME=$(. /etc/os-release && echo $VERSION_CODENAME) && \
        echo "# RSPM snapshot automatically set to renv.lock date: ${RENV_DATE} (${UBUNTU_CODENAME})" >> /usr/local/lib/R/etc/Rprofile.site && \
        echo "options(repos = c(RSPM = 'https://packagemanager.posit.co/cran/__linux__/${UBUNTU_CODENAME}/${RENV_DATE}', CRAN = 'https://cloud.r-project.org'))" >> /usr/local/lib/R/etc/Rprofile.site; \
    else \
        UBUNTU_CODENAME=$(. /etc/os-release && echo $VERSION_CODENAME) && \
        echo "# No renv.lock found, using latest RSPM snapshot (${UBUNTU_CODENAME})" >> /usr/local/lib/R/etc/Rprofile.site && \
        echo "options(repos = c(RSPM = 'https://packagemanager.posit.co/cran/__linux__/${UBUNTU_CODENAME}/latest', CRAN = 'https://cloud.r-project.org'))" >> /usr/local/lib/R/etc/Rprofile.site; \
    fi

# Copy remaining project files (for better Docker layer caching)
COPY --chown=${USERNAME}:${USERNAME} DESCRIPTION .
COPY --chown=${USERNAME}:${USERNAME} .Rprofile* ./
COPY --chown=${USERNAME}:${USERNAME} setup_renv.R* ./

# Switch to non-root user for R package installation
USER ${USERNAME}

# Copy dotfiles (consolidated with wildcards)
# Note: .zshrc copied directly from dotfiles directory (no filtering)
COPY --chown=${USERNAME}:${USERNAME} .vimrc* .gitconfig* \
     .zshrc* .inputrc* .bashrc* .profile* .aliases* .functions* .exports* \
     .editorconfig* .ctags* .ackrc* .ripgreprc* /home/${USERNAME}/

# Install zsh plugins
# EFFICIENCY: Shallow clone (--depth 1) reduces download size by ~90%
#   - Only fetches latest commit instead of full git history
#   - zsh-autosuggestions: ~300KB vs ~3MB (full history)
#   - zsh-syntax-highlighting: ~500KB vs ~5MB (full history)
# SAFETY FIX: Pinned to specific release tags (as of 2025-10-23)
#   - Using HEAD/master can change unexpectedly
#   - Specific tags ensure reproducible builds
#   - Update tags when you want newer plugin features
RUN ZSH_AUTOSUGGESTIONS_VERSION=v0.7.1 && \
    ZSH_SYNTAX_VERSION=0.8.0 && \
    mkdir -p /home/${USERNAME}/.zsh && \
    git clone --depth 1 --branch ${ZSH_AUTOSUGGESTIONS_VERSION} \
     https://github.com/zsh-users/zsh-autosuggestions \
     /home/${USERNAME}/.zsh/zsh-autosuggestions && \
    git clone --depth 1 --branch ${ZSH_SYNTAX_VERSION} \
     https://github.com/zsh-users/zsh-syntax-highlighting \
     /home/${USERNAME}/.zsh/zsh-syntax-highlighting

# Install vim-plug
# SAFETY FIX: Pinned to v0.14.0 release (latest stable as of 2025-10-23)
#   - Using 'master' branch is security risk (can change unexpectedly)
#   - Specific version ensures reproducible builds
#   - Update version when you want newer vim-plug features
RUN VIM_PLUG_VERSION=0.14.0 && \
    curl -fLo /home/${USERNAME}/.vim/autoload/plug.vim --create-dirs \
    "https://raw.githubusercontent.com/junegunn/vim-plug/${VIM_PLUG_VERSION}/plug.vim"

# Install vim plugins (suppress interactive mode)
RUN vim +PlugInstall +qall || true

# Copy rest of project
COPY --chown=${USERNAME}:${USERNAME} . .

# Restore renv dependencies before installing the package
# CRITICAL: This uses the RSPM snapshot configured above based on renv.lock date
#   - Ensures binary package availability for fast installation
#   - Part of the Five Pillars of Reproducibility framework
RUN R -e "renv::restore()"

# Install the research compendium as a package (analyst has write
# permissions)
# Use standard R installation approach that works with any R setup
RUN R -e "install.packages('.', repos = NULL, type = 'source', \
           dependencies = TRUE)"

# Set default shell and working directory
WORKDIR /home/${USERNAME}/project
CMD ["/bin/zsh"]
