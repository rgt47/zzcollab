# syntax=docker/dockerfile:1.4
#=================================================================
# ZZCOLLAB Alpine GUI Profile - Lightweight with X11 Graphics
#=================================================================
# Profile: alpine_gui (~500MB)
# Purpose: Lightweight Alpine with minimal X11 for graphics viewing
# Base: rhub/r-minimal (Alpine + R)
# Packages: renv, tidyverse basics, Cairo, svglite
#
# Build: DOCKER_BUILDKIT=1 docker build \
#          -f Dockerfile.alpine_gui -t myteam/project:alpine-gui .
# Size: ~500MB vs ~2.5GB for gui_analysis (5x smaller)
# Usage: Requires X forwarding (XQuartz on macOS)
#=================================================================

ARG R_VERSION=latest
ARG USERNAME=analyst
ARG TEAM_NAME=zzcollab
ARG PROJECT_NAME=project

#=================================================================
# STAGE 1: BUILDER
#=================================================================
FROM rhub/r-minimal:${R_VERSION} AS builder

# Install build dependencies (Alpine apk)
RUN --mount=type=cache,target=/var/cache/apk,sharing=locked \
    set -ex && \
    apk add --no-cache \
        gcc \
        g++ \
        gfortran \
        make \
        musl-dev \
        linux-headers \
        curl-dev \
        openssl-dev \
        libxml2-dev \
        zlib-dev \
        bzip2-dev \
        xz-dev \
        # X11 build dependencies
        libx11-dev \
        cairo-dev \
        git

# Configure CRAN
WORKDIR /build
COPY renv.lock* ./

RUN echo "options(repos = c(CRAN = 'https://cloud.r-project.org'))" \
        >> /usr/local/lib/R/etc/Rprofile.site

# Install analysis + graphics packages (source compilation)
RUN --mount=type=cache,target=/tmp/R-cache \
    R -e "install.packages(c('renv', 'devtools', 'dplyr', \
           'ggplot2', 'readr', 'tidyr', 'here', 'janitor', \
           'stringr', 'lubridate', 'scales', 'Cairo', 'svglite'))"

# Restore renv
COPY DESCRIPTION setup_renv.R* ./
RUN if [ -f renv.lock ]; then R -e "renv::restore()"; fi

#=================================================================
# STAGE 2: RUNTIME
#=================================================================
FROM rhub/r-minimal:${R_VERSION}

ARG USERNAME=analyst
ARG TEAM_NAME=zzcollab
ARG PROJECT_NAME=project

# Copy R libraries from builder
# Note: rhub/r-minimal uses 'library' not 'site-library'
COPY --from=builder /usr/local/lib/R/library \
     /usr/local/lib/R/library
COPY --from=builder /usr/local/lib/R/etc/Rprofile.site \
     /usr/local/lib/R/etc/Rprofile.site

# Install runtime dependencies
RUN --mount=type=cache,target=/var/cache/apk,sharing=locked \
    set -ex && \
    apk add --no-cache \
        # Standard runtime libraries
        libcurl \
        openssl \
        libxml2 \
        zlib \
        bzip2 \
        xz \
        libgfortran \
        # X11 minimal support
        xorg-server \
        xauth \
        libx11 \
        cairo \
        mesa-dri-gallium \
        font-misc-misc \
        ttf-dejavu \
        # Development tools
        git \
        vim \
        zsh \
        tmux \
        curl \
        wget \
        sudo \
        shadow \
        nodejs \
        npm \
        # Python for vim plugins
        python3 \
        py3-pip

# External dependencies
RUN --mount=type=cache,target=/tmp/downloads \
    set -ex && \
    ZSH_AUTOSUGGESTIONS_VERSION=v0.7.1 && \
    ZSH_SYNTAX_VERSION=0.8.0 && \
    mkdir -p /tmp/.zsh && \
    git clone --depth 1 --branch ${ZSH_AUTOSUGGESTIONS_VERSION} \
        https://github.com/zsh-users/zsh-autosuggestions \
        /tmp/.zsh/zsh-autosuggestions & \
    git clone --depth 1 --branch ${ZSH_SYNTAX_VERSION} \
        https://github.com/zsh-users/zsh-syntax-highlighting \
        /tmp/.zsh/zsh-syntax-highlighting & \
    VIM_PLUG_VERSION=0.14.0 && \
    mkdir -p /tmp/.vim/autoload && \
    curl -fLo /tmp/.vim/autoload/plug.vim \
        https://raw.githubusercontent.com/junegunn/vim-plug/\
${VIM_PLUG_VERSION}/plug.vim & \
    wait

# User setup
RUN adduser -D -s /bin/zsh ${USERNAME} && \
    echo "${USERNAME} ALL=(ALL) NOPASSWD:ALL" > \
        /etc/sudoers.d/${USERNAME} && \
    chmod 0440 /etc/sudoers.d/${USERNAME} && \
    mkdir -p /home/${USERNAME}/project && \
    mv /tmp/.zsh /home/${USERNAME}/.zsh && \
    mv /tmp/.vim /home/${USERNAME}/.vim && \
    chown -R ${USERNAME}:${USERNAME} /home/${USERNAME} && \
    chown -R ${USERNAME}:${USERNAME} /usr/local/lib/R/library

# Password
RUN --mount=type=secret,id=password \
    if [ -f /run/secrets/password ]; then \
        echo "${USERNAME}:$(cat /run/secrets/password)" | chpasswd; \
    else \
        PASSWORD=$(openssl rand -base64 12) && \
        echo "${USERNAME}:${PASSWORD}" | chpasswd && \
        echo "=============================================" && \
        echo "Generated password: ${PASSWORD}" && \
        echo "User: ${USERNAME}" && \
        echo "Alpine GUI (X11 graphics enabled)" && \
        echo "=============================================="; \
    fi

USER ${USERNAME}
WORKDIR /home/${USERNAME}/project

# Copy dotfiles (optional - wildcards allow missing files)
COPY --chown=${USERNAME}:${USERNAME} \
    .vimrc* \
    .gitconfig* \
    .tmux.conf* \
    .zshrc* \
    .bashrc* \
    .bash_profile* \
    .profile* \
    .emacs* \
    .emacs.d* \
    /home/${USERNAME}/

# Vim plugins
RUN timeout 300 vim +PlugInstall +qall 2>&1 | \
        tee /tmp/vim-install.log || true

# Project files (package not installed - use source files directly for interactive analysis)
COPY --chown=${USERNAME}:${USERNAME} . .

# Metadata
LABEL org.opencontainers.image.title=\
"ZZCOLLAB Alpine GUI Environment" \
      org.opencontainers.image.description=\
"Lightweight Alpine with X11 support for graphics viewing" \
      org.opencontainers.image.vendor="ZZCOLLAB" \
      org.opencontainers.image.authors="${TEAM_NAME}" \
      org.opencontainers.image.source=\
"https://github.com/${TEAM_NAME}/${PROJECT_NAME}" \
      zzcollab.profile="alpine_gui" \
      zzcollab.size="~500MB"

# Copy and configure ZZCOLLAB entrypoint for auto-snapshot on exit (requires root)
USER root
COPY zzcollab-entrypoint.sh /usr/local/bin/zzcollab-entrypoint.sh
RUN chmod +x /usr/local/bin/zzcollab-entrypoint.sh

# Stay as root - entrypoint will exec as ${USERNAME} for shell sessions
ENTRYPOINT ["/usr/local/bin/zzcollab-entrypoint.sh"]
CMD ["/bin/zsh"]
