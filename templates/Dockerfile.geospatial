# syntax=docker/dockerfile:1.4
#=================================================================
# ZZCOLLAB Geospatial Profile - Spatial Analysis
#=================================================================
# Profile: geospatial (~2.5GB)
# Purpose: Geospatial data analysis with sf, terra, and mapping
# Base: rocker/geospatial (R + tidyverse + spatial libraries)
# Packages: sf, terra, leaflet, mapview, tmap, raster, stars
#
# Build: DOCKER_BUILDKIT=1 docker build \
#          -f Dockerfile.geospatial -t myteam/project:geospatial .
# Note: AMD64 only - ARM64 not fully supported
#=================================================================

ARG R_VERSION=latest
ARG USERNAME=analyst
ARG TEAM_NAME=zzcollab
ARG PROJECT_NAME=project
ARG TARGETPLATFORM

#=================================================================
# STAGE 1: BUILDER
#=================================================================
FROM rocker/geospatial:${R_VERSION} AS builder

ARG DEBIAN_FRONTEND=noninteractive
ARG TARGETPLATFORM

# Platform check (geospatial has limited ARM64 support)
RUN if [ "${TARGETPLATFORM}" = "linux/arm64" ]; then \
        echo "WARNING: rocker/geospatial has limited ARM64 support" >&2; \
        echo "Some spatial libraries may not work correctly" >&2; \
    fi

# Install build dependencies
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt/lists,sharing=locked \
    set -ex && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
        wget \
        ca-certificates && \
    # r2u repository
    wget -q -O- https://eddelbuettel.github.io/r2u/assets/\
dirk_eddelbuettel_key.asc | \
        tee -a /etc/apt/trusted.gpg.d/cranapt_key.asc && \
    echo "deb [arch=amd64,arm64] \
https://r2u.stat.illinois.edu/ubuntu noble main" > \
        /etc/apt/sources.list.d/cranapt.list && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
        build-essential \
        libcurl4-openssl-dev \
        libssl-dev \
        libxml2-dev \
        libgit2-dev \
        libssh2-1-dev \
        libfontconfig1-dev \
        libharfbuzz-dev \
        libfribidi-dev \
        libfreetype6-dev \
        libpng-dev \
        libjpeg-dev \
        # Geospatial build dependencies
        libgdal-dev \
        libproj-dev \
        libgeos-dev \
        libudunits2-dev \
        netcdf-bin \
        libsqlite3-dev

# Configure RSPM
WORKDIR /build
COPY renv.lock* ./

RUN UBUNTU_CODENAME=$(. /etc/os-release && echo $VERSION_CODENAME) && \
    echo "options(repos = c(" \
        "CRAN = 'https://packagemanager.posit.co/cran/__linux__/${UBUNTU_CODENAME}/2024-10-26'))" \
        >> /usr/local/lib/R/etc/Rprofile.site && \
    echo "options(HTTPUserAgent = sprintf('R/%s R (%s)', getRversion(), paste(getRversion(), R.version\$platform, R.version\$arch, R.version\$os)))" \
        >> /usr/local/lib/R/etc/Rprofile.site

# Install geospatial packages
RUN --mount=type=cache,target=/tmp/R-cache \
    R -e "install.packages(c('renv', 'devtools', 'sf', 'terra', 'leaflet', 'mapview', 'tmap', 'raster', 'stars', 'gstat', 'spatstat'))"

# Restore renv
COPY DESCRIPTION setup_renv.R* ./
RUN if [ -f renv.lock ]; then R -e "renv::restore()"; fi

#=================================================================
# STAGE 2: RUNTIME
#=================================================================
FROM rocker/geospatial:${R_VERSION}

ARG USERNAME=analyst
ARG TEAM_NAME=zzcollab
ARG PROJECT_NAME=project
ARG DEBIAN_FRONTEND=noninteractive

# Copy R libraries from builder
COPY --from=builder /usr/local/lib/R/site-library /usr/local/lib/R/site-library
COPY --from=builder /usr/local/lib/R/etc/Rprofile.site /usr/local/lib/R/etc/Rprofile.site

# Install runtime dependencies
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt/lists,sharing=locked \
    set -ex && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
        # Core runtime
        libcurl4 \
        libssl3 \
        libxml2 \
        libgit2-1.1 \
        libssh2-1 \
        libfontconfig1 \
        libharfbuzz0b \
        libfribidi0 \
        libfreetype6 \
        libpng16-16 \
        libjpeg8 \
        # Geospatial runtime libraries (NOT -dev)
        libgdal30 \
        libproj25 \
        libgeos-c1v5 \
        libudunits2-0 \
        libsqlite3-0 \
        # Development tools
        git \
        vim \
        zsh \
        tmux \
        curl \
        wget \
        sudo \
        procps && \
    curl -fsSL https://deb.nodesource.com/setup_lts.x | bash - && \
    apt-get install -y --no-install-recommends nodejs

# External dependencies
RUN --mount=type=cache,target=/tmp/downloads \
    set -ex && \
    ZSH_AUTOSUGGESTIONS_VERSION=v0.7.1 && \
    ZSH_SYNTAX_VERSION=0.8.0 && \
    mkdir -p /tmp/.zsh && \
    git clone --depth 1 --branch ${ZSH_AUTOSUGGESTIONS_VERSION} \
        https://github.com/zsh-users/zsh-autosuggestions /tmp/.zsh/zsh-autosuggestions & \
    git clone --depth 1 --branch ${ZSH_SYNTAX_VERSION} \
        https://github.com/zsh-users/zsh-syntax-highlighting /tmp/.zsh/zsh-syntax-highlighting & \
    VIM_PLUG_VERSION=0.14.0 && \
    mkdir -p /tmp/.vim/autoload && \
    curl -fLo /tmp/.vim/autoload/plug.vim \
        https://raw.githubusercontent.com/junegunn/vim-plug/${VIM_PLUG_VERSION}/plug.vim & \
    wait

# User setup
RUN useradd --create-home --shell /bin/zsh ${USERNAME} && \
    usermod -aG sudo ${USERNAME} && \
    echo "${USERNAME} ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/${USERNAME} && \
    chmod 0440 /etc/sudoers.d/${USERNAME} && \
    mkdir -p /home/${USERNAME}/project && \
    mv /tmp/.zsh /home/${USERNAME}/.zsh && \
    mv /tmp/.vim /home/${USERNAME}/.vim && \
    chown -R ${USERNAME}:${USERNAME} /home/${USERNAME} && \
    chown -R ${USERNAME}:${USERNAME} /usr/local/lib/R/site-library

# Password
RUN --mount=type=secret,id=password \
    if [ -f /run/secrets/password ]; then \
        echo "${USERNAME}:$(cat /run/secrets/password)" | chpasswd; \
    else \
        PASSWORD=$(openssl rand -base64 12) && \
        echo "${USERNAME}:${PASSWORD}" | chpasswd && \
        echo "=============================================" && \
        echo "Generated password: ${PASSWORD}" && \
        echo "User: ${USERNAME}" && \
        echo "=============================================="; \
    fi

USER ${USERNAME}
WORKDIR /home/${USERNAME}/project

# Copy dotfiles (optional - wildcards allow missing files)
COPY --chown=${USERNAME}:${USERNAME} \
    .vimrc* \
    .gitconfig* \
    .tmux.conf* \
    .zshrc* \
    .bashrc* \
    .bash_profile* \
    .profile* \
    .emacs* \
    .emacs.d* \
    /home/${USERNAME}/

# Vim plugins
RUN timeout 300 vim +PlugInstall +qall 2>&1 | tee /tmp/vim-install.log || true

# Project files
COPY --chown=${USERNAME}:${USERNAME} . .

# Install package
RUN R -e "install.packages('.', repos = NULL, type = 'source', dependencies = TRUE)"

# Metadata
LABEL org.opencontainers.image.title="ZZCOLLAB Geospatial Environment" \
      org.opencontainers.image.description="Spatial analysis with sf, terra, and mapping" \
      org.opencontainers.image.vendor="ZZCOLLAB" \
      org.opencontainers.image.authors="${TEAM_NAME}" \
      org.opencontainers.image.source="https://github.com/${TEAM_NAME}/${PROJECT_NAME}" \
      zzcollab.profile="geospatial" \
      zzcollab.size="~2.5GB"

# Copy and configure ZZCOLLAB entrypoint for auto-snapshot on exit (requires root)
USER root
COPY zzcollab-entrypoint.sh /usr/local/bin/zzcollab-entrypoint.sh
RUN chmod +x /usr/local/bin/zzcollab-entrypoint.sh

# Stay as root - RStudio's /init handles user switching
ENTRYPOINT ["/usr/local/bin/zzcollab-entrypoint.sh"]
CMD ["/init"]
