# ZZCOLLAB Team Configuration
# This file defines Docker environments and team settings for your zzcollab project.
# Edit this file to customize your team's development environment.
#
# VARIANT CATEGORIES:
# - Standard: Rocker-based images (full-featured, ~1GB)
# - Alpine: Ultra-lightweight images (~200MB) - ideal for CI/CD and resource-constrained environments  
# - R-hub: CRAN-compatible testing environments for package development
# - Specialized: Domain-specific environments (bioinformatics, geospatial, etc.)
#
# USAGE:
# 1. Set `enabled: true` for environments you want to build
# 2. Customize packages and system_deps as needed
# 3. Choose your approach:
#    a) Set `use_config_environments: true` below - uses this file automatically
#    b) Use flag: zzcollab -i -t myteam -p myproject --variants-config config.yaml
#    c) Legacy: zzcollab -i -t myteam -p myproject -B r-ver,rstudio

#=============================================================================
# TEAM METADATA
#=============================================================================

team:
  name: "${TEAM_NAME}"
  project: "${PROJECT_NAME}"
  description: "Research collaboration environment for ${PROJECT_NAME}"
  maintainer: "${AUTHOR_NAME} <${AUTHOR_EMAIL}>"
  created: "${CREATION_DATE}"

#=============================================================================
# DOCKER ENVIRONMENTS CONFIGURATION
#=============================================================================
# Define unlimited custom Docker environments for your team.
# Each environment creates a Docker image: ${TEAM_NAME}/${PROJECT_NAME}core-{environment_name}:latest

environments:
  
  #---------------------------------------------------------------------------
  # TEAM VARIANTS (Reference environments.yaml for full definitions)
  #---------------------------------------------------------------------------
  
  # Default environments enabled for new teams
  # Definitions are automatically pulled from environments.yaml
  # Use ./add_environment.sh to browse and add more environments interactively
  
  minimal:
    enabled: true    # Essential development environment (~800MB)
  
  analysis:
    enabled: true    # Tidyverse analysis environment (~1.2GB)
    
  # Machine learning and modeling environment
  modeling:
    base_image: "rocker/r-ver:latest"
    description: "Machine learning and statistical modeling environment" 
    packages:
      - "renv"
      - "devtools"
      - "tidyverse"    # Data manipulation for ML
      - "tidymodels"   # ML framework
      - "xgboost"      # Gradient boosting
      - "randomForest" # Random forests
      - "glmnet"       # Regularized regression
      - "caret"        # Classification and regression
      - "MASS"         # Statistical functions
      - "mlr3"         # Modern ML framework
    system_deps:
      - "libxml2-dev"  # Required for XML parsing
      - "libcurl4-openssl-dev"  # Required for web requests
      - "libssl-dev"   # Required for secure connections
      - "libgsl-dev"   # GNU Scientific Library for advanced algorithms
      - "libblas-dev"  # Basic Linear Algebra Subprograms
      - "liblapack-dev" # Linear Algebra PACKage
    enabled: false    # Disabled by default (large image)
    
  # Publishing and reporting environment
  publishing:
    base_image: "rocker/verse:latest"
    description: "Document publishing with LaTeX, Quarto, and web tools"
    packages:
      - "renv"
      - "devtools" 
      - "quarto"       # Modern publishing
      - "bookdown"     # Book publishing
      - "blogdown"     # Website creation
      - "distill"      # Scientific articles
      - "flexdashboard" # Interactive dashboards
      - "shiny"        # Web applications
      - "DT"           # Interactive tables
      - "plotly"       # Interactive plots
    system_deps:
      - "pandoc"       # Document conversion (usually included in verse)
      - "texlive-full" # Complete LaTeX distribution (usually included in verse)
      - "libxml2-dev"  # Required for XML processing
      - "libcurl4-openssl-dev"  # Required for web requests
    enabled: false    # Disabled by default (very large image)
    
  # Geospatial analysis environment
  geospatial:
    base_image: "rocker/geospatial:latest"
    description: "Geospatial analysis with sf, terra, and mapping tools"
    packages:
      - "renv"
      - "devtools"
      - "sf"           # Simple features
      - "terra"        # Spatial data
      - "leaflet"      # Interactive maps
      - "mapview"      # Quick spatial visualization
      - "tmap"         # Thematic maps
    system_deps:
      - "gdal-bin"     # Geospatial library
      - "proj-bin"     # Projection library
    enabled: false
    
  # Bioinformatics environment  
  bioinformatics:
    base_image: "bioconductor/bioconductor_docker:latest"
    description: "Bioinformatics analysis with Bioconductor packages"
    packages:
      - "renv"
      - "devtools"
      - "BiocManager"
      - "DESeq2"       # Differential expression
      - "edgeR"        # RNA-seq analysis
      - "limma"        # Linear models
      - "GenomicRanges" # Genomic intervals
      - "Biostrings"   # String manipulation for sequences
      - "rtracklayer"  # Interface to genome browsers
    system_deps:
      - "libxml2-dev"  # Required for XML parsing
      - "libcurl4-openssl-dev"  # Required for web requests
      - "libssl-dev"   # Required for secure connections
      - "zlib1g-dev"   # Compression library
      - "libbz2-dev"   # Compression library
      - "liblzma-dev"  # LZMA compression
    enabled: false

  #---------------------------------------------------------------------------
  # LIGHTWEIGHT & SPECIALIZED VARIANTS
  #---------------------------------------------------------------------------
  
  # Ultra-lightweight Alpine Linux based environment
  alpine_minimal:
    base_image: "velaco/alpine-r:latest"
    description: "Ultra-lightweight Alpine Linux with R (small footprint for CI/CD)"
    packages:
      - "renv"
      - "devtools"     # Core development only
      - "testthat"     # Testing
    system_deps:
      - "git"          # Version control
      - "make"         # Build tools
    enabled: false
    notes: "~200MB vs ~1GB for rocker images - excellent for CI/CD pipelines"
  
  # Alpine with essential analysis packages
  alpine_analysis:
    base_image: "velaco/alpine-r:latest"
    description: "Lightweight Alpine with core data analysis packages"
    packages:
      - "renv"
      - "dplyr"        # Data manipulation
      - "ggplot2"      # Plotting
      - "readr"        # Data import
      - "tidyr"        # Data tidying
      - "here"         # Path management
      - "janitor"      # Data cleaning
      - "devtools"     # Development tools
    system_deps:
      - "git"
      - "make"
      - "curl"         # For downloading data
      - "curl-dev"     # Development headers for curl
      - "openssl-dev"  # Required for secure connections
      - "libxml2-dev"  # Required for XML parsing
    enabled: false
    
  # R-hub Linux (Ubuntu-based testing environment)
  rhub_ubuntu:
    base_image: "rhub/ubuntu-gcc-release:latest"
    description: "R-hub Ubuntu environment for package testing and CI/CD"
    packages:
      - "renv"
      - "devtools"
      - "testthat"
      - "rcmdcheck"    # Package checking
      - "covr"         # Code coverage
      - "pkgdown"      # Documentation sites
      - "roxygen2"     # Documentation generation
    system_deps:
      - "qpdf"         # PDF tools for R CMD check
      - "pandoc"       # Document conversion
      - "libxml2-dev"  # Required for XML parsing
      - "libcurl4-openssl-dev"  # Required for web requests
      - "libssl-dev"   # Required for secure connections
      - "libgit2-dev"  # Required for git operations
    enabled: false
    notes: "Matches CRAN check environment for reliable package testing"
    
  # R-hub Fedora (alternative Linux distribution)
  rhub_fedora:
    base_image: "rhub/fedora-gcc-devel:latest" 
    description: "R-hub Fedora environment with latest R-devel for cutting-edge testing"
    packages:
      - "renv"
      - "devtools"
      - "testthat"
      - "rcmdcheck"
      - "roxygen2"     # Documentation generation
    system_deps:
      - "pandoc"
      - "qpdf"
      - "which"        # Required by some packages
      - "libxml2-devel" # Fedora naming for XML development headers
      - "libcurl-devel" # Fedora naming for curl development headers
      - "openssl-devel" # Fedora naming for SSL development headers
      - "libgit2-devel" # Fedora naming for git2 development headers
    enabled: false
    notes: "Tests against R-devel to catch future compatibility issues"
    
  # R-hub Windows (Wine-based Windows simulation on Linux)
  rhub_windows:
    base_image: "rhub/windows-x86_64-mingw-w64:latest"
    description: "R-hub Windows environment for cross-platform package testing"
    packages:
      - "renv"
      - "devtools"
      - "testthat"
      - "rcmdcheck"
      - "roxygen2"     # Documentation generation
    system_deps:
      # Note: Windows environment has different system dependency management
      # Most dependencies are pre-installed or handled via Rtools
      - "qpdf"         # PDF tools (if available)
    enabled: false
    notes: "Tests Windows-specific package behavior without needing Windows"
    
  # High-performance computing variant
  hpc_alpine:
    base_image: "velaco/alpine-r:latest"
    description: "HPC-focused environment with parallel processing and lightweight footprint"
    packages:
      - "renv"
      - "devtools"
      - "parallel"     # Built-in parallel processing
      - "foreach"      # Parallel loops
      - "doParallel"   # Parallel backend
      - "future"       # Asynchronous processing
      - "furrr"        # Parallel purrr
      - "data.table"   # High-performance data manipulation
      - "Rcpp"         # C++ integration
      - "RcppArmadillo" # Linear algebra library
    system_deps:
      - "make"
      - "g++"          # C++ compiler
      - "git"
      - "gfortran"     # Fortran compiler for numerical libraries
      - "openblas-dev" # Optimized BLAS library
      - "lapack-dev"   # Linear algebra package
      - "cmake"        # Build system for complex packages
      - "curl-dev"     # Development headers for curl
    enabled: false
    notes: "Optimized for computational efficiency and container orchestration"

  #---------------------------------------------------------------------------
  # CUSTOM VARIANTS (Add your own below)
  #---------------------------------------------------------------------------
  
  # Migrated from user config: Bioinformatics research workflow
  bioinformatics_user:
    base_image: "bioconductor/bioconductor_docker:latest"
    description: "Bioinformatics research workflow (migrated from user config)"
    packages:
      - "renv"
      - "remotes"
      - "tidyverse"     # User specified tidyverse
      - "BiocManager"   # For Bioconductor packages
      - "Biostrings"    # From user's renv_packages
      - "GenomicRanges" # From user's renv_packages
      - "DESeq2"        # From user's renv_packages
      - "edgeR"         # From user's renv_packages
      - "limma"         # From user's renv_packages
      - "devtools"      # Standard development
    system_deps:
      - "libxml2-dev"   # Required for XML parsing
      - "libcurl4-openssl-dev"  # Required for web requests
      - "libssl-dev"    # Required for secure connections
      - "zlib1g-dev"    # Compression library
      - "libbz2-dev"    # Compression library
      - "liblzma-dev"   # LZMA compression
    enabled: false       # Set to true to build this environment
    notes: "Migrated from ~/.zzcollab/config.yaml custom_modes"
  
  # Migrated from user config: Geospatial analysis workflow
  geospatial_user:
    base_image: "rocker/geospatial:latest"
    description: "Geospatial analysis workflow (migrated from user config)"
    packages:
      - "renv"
      - "remotes"
      - "tidyverse"     # User specified tidyverse
      - "sf"            # From user's docker_packages and renv_packages
      - "terra"         # From user's docker_packages and renv_packages
      - "raster"        # From user's renv_packages
      - "leaflet"       # From user's renv_packages
      - "tmap"          # From user's renv_packages
      - "mapview"       # From user's renv_packages
      - "devtools"      # Standard development
    system_deps:
      - "gdal-bin"      # Geospatial library (usually included in rocker/geospatial)
      - "proj-bin"      # Projection library (usually included in rocker/geospatial)
      - "libgeos-dev"   # Geometry library
      - "libproj-dev"   # Projection library development headers
      - "libgdal-dev"   # GDAL development headers
      - "libudunits2-dev" # Units library
      - "netcdf-bin"    # NetCDF tools
      - "libxml2-dev"   # Required for XML parsing
    enabled: false       # Set to true to build this environment
    notes: "Migrated from ~/.zzcollab/config.yaml custom_modes"

  # Copy personal environments here and set enabled: true to build them
  # Example: Copy from ~/.zzcollab/config.yaml personal variants
  
  # personal_bioinformatics_team:
  #   base_image: "bioconductor/bioconductor_docker:latest"
  #   description: "Personal bioinformatics research workflow"
  #   packages:
  #     - "renv"
  #     - "remotes" 
  #     - "tidyverse"
  #     - "BiocManager"
  #     - "Biostrings"
  #     - "GenomicRanges"
  #     - "DESeq2"
  #     - "edgeR"
  #     - "limma"
  #     - "devtools"
  #   system_deps:
  #     - "libxml2-dev"
  #     - "libcurl4-openssl-dev"
  #     - "libssl-dev"
  #     - "zlib1g-dev"
  #     - "libbz2-dev"
  #     - "liblzma-dev"
  #   enabled: true    # SET TO TRUE TO BUILD THIS TEAM IMAGE
  
  # personal_alpine_minimal_team:
  #   base_image: "velaco/alpine-r:latest"
  #   description: "Ultra-lightweight Alpine Linux with R for CI/CD"
  #   packages:
  #     - "renv"
  #     - "devtools"
  #     - "testthat"
  #     - "here"
  #   system_deps:
  #     - "git"
  #     - "make"
  #     - "curl"
  #     - "curl-dev"
  #     - "openssl-dev"
  #     - "libxml2-dev"
  #   enabled: true    # SET TO TRUE TO BUILD THIS TEAM IMAGE
  
  # Example custom environment - uncomment and modify as needed
  # custom_example:
  #   base_image: "rocker/r-ver:latest"  # REQUIRED: Docker base image
  #   description: "Custom environment for specific project needs"
  #   packages:                           # REQUIRED: R packages to install
  #     - "renv"                         # Always include renv for reproducibility
  #     - "devtools"                     # Recommended for development
  #     - "your_package_here"            # Add your specific packages
  #   system_deps:                       # IMPORTANT: System libraries your R packages need
  #     - "libxml2-dev"                  # Common: required by many R packages
  #     - "libcurl4-openssl-dev"         # Common: required for web requests
  #     - "your_system_dependency_here"  # Add specific system libraries
  #   enabled: false
  #
  # IMPORTANT NOTES FOR CUSTOM ENVIRONMENTS:
  # - base_image: Choose appropriate Docker base (rocker/r-ver, rocker/tidyverse, etc.)
  # - packages: Always include "renv" for reproducibility
  # - system_deps: Critical for R packages with compiled code or system dependencies
  #   Common system dependencies:
  #   * libxml2-dev: Required by xml2, httr, rvest, and many web-related packages
  #   * libcurl4-openssl-dev: Required by curl, httr, and web-related packages  
  #   * libssl-dev: Required for secure connections and crypto packages
  #   * libgit2-dev: Required by git2r and related packages
  #   * build-essential: Required for packages with compiled C/C++ code
  #   * gfortran: Required for packages with Fortran code
  # - Check package documentation for specific system requirements

#=============================================================================
# BUILD CONFIGURATION
#=============================================================================

build:
  # Use environments defined in this config file by default
  use_config_environments: true   # If true, uses environments from this file instead of -B flag
  
  # Default environments to build (only enabled environments with these names)
  default_environments:
    - "minimal"      # Standard rocker-based minimal environment
    - "analysis"     # Standard rocker-based analysis environment
    # Uncomment below for specialized environments:
    # - "alpine_minimal"   # Ultra-lightweight (~200MB vs ~1GB)
    # - "rhub_ubuntu"      # CRAN-compatible testing environment
    # - "hpc_alpine"       # High-performance computing
  
  # Docker build options
  docker:
    platform: "auto"  # auto, linux/amd64, linux/arm64
    no_cache: false
    parallel_builds: true
    
  # Package installation options  
  packages:
    repos: "https://cran.rstudio.com/"
    install_suggests: false
    dependencies: ["Depends", "Imports", "LinkingTo"]
    
#=============================================================================
# DEVELOPMENT SETTINGS  
#=============================================================================

development:
  # Default interface for team members
  default_interface: "minimal"  # Which environment to use by default
  
  # Shared development settings
  dotfiles:
    auto_filter_macos: true    # Filter macOS commands for Docker
    preserve_permissions: true
    
  # Container settings
  container:
    default_user: "analyst"
    working_dir: "/home/analyst/project"
    shared_volumes:
      - "${PWD}:/home/analyst/project"
      
#=============================================================================
# TEAM COLLABORATION
#=============================================================================

collaboration:
  # GitHub integration
  github:
    auto_create_repo: false
    default_visibility: "private"
    enable_actions: true
    
  # Documentation
  documentation:
    auto_generate_readme: true
    include_variant_docs: true
    update_user_guide: true